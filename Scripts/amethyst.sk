#
#	Amethyst - 1.1.0
#	
#	Author: Baezor (https://shop.minehut.com/collections/baezor)
#

#
#	Settings
#

# Options
options:

	#
	#	Important
	#

	verbose: true
	check.version: 12 hours
	version: 1.1.0
	storage: amethyst

#
#	Importing
#

# Import
import:

	org.bukkit.Bukkit
	me.lucko.spark.api.Spark
	me.lucko.spark.api.statistic.StatisticWindow

#
#	Uptime Tracker
#

# Uptime Expression
expression uptime:
	return type: timespan
	get:
		return difference between now and {{@storage}::start}

# Server Load
on skript load:
	
	# Set Start Varaiable
	set {{@storage}::start} to now

#
#	Format Timespans
#

# Format Timespan
expression format time[span] %timespan%:
	return type: string
	get:
		set {_time} to "%expr-1%"
		set {_l::*} to split {_time} at " "
		loop {_l::*}:
			delete {_i}
			set {_i} to loop-value parsed as a number
			{_i} is set
			set {_i} to floor({_i})
			replace every "%loop-value%" in {_time} with "%{_i}%"
		replace all " seconds" or " second" in {_time} with "s"
		replace all " minutes" or " minute" in {_time} with "m"
		replace all " hours" or " hour" in {_time} with "h"
		replace all " days" or " day" in {_time} with "d"
		return {_time}

#
#	Spark Performance API
#

# Spark TPS
expression [spark] tps:
	return type: number
	get:
		set {_spark} to Bukkit.getServicesManager().getRegistration(Spark.class).getProvider()
		return {_spark}.tps().poll(StatisticWindow.TicksPerSecond.SECONDS_5)

# Spark MSPT
expression [spark] mspt:
	return type: number
	get:
		set {_spark} to Bukkit.getServicesManager().getRegistration(Spark.class).getProvider()
		return {_spark}.mspt().poll(StatisticWindow.MillisPerTick.MINUTES_1).median()

# Spark CPU
expression [spark] cpu:
	return type: number
	get:
		set {_spark} to Bukkit.getServicesManager().getRegistration(Spark.class).getProvider()
		return {_spark}.cpuSystem().poll(StatisticWindow.CpuUsage.SECONDS_10)

# Spark CPU System

#
#	Logging API
#

# Log Info
effect log %string% as [a] info:
	trigger:
		Bukkit.getLogger().info(expr-1)

# Log Warn
effect log %string% as [a] warn[ing]:
	trigger:
		Bukkit.getLogger().warning(expr-1)

# Log Error
effect log %string% as [a] error:
	trigger:
		Bukkit.getLogger().severe(expr-1)

#
#	Text API
#

# Tooltips
expression tooltip %string% with %strings%:
	return type: string
	get:
		loop expr-2:
			if {_str} is not set:
				set {_str} to "%loop-value%"
			else:
				set {_str} to "%{_str}%%nl%%loop-value%"
		return "<tooltip:%{_str}%>%expr-1%<reset>"

# Command
expression [click] command %string% with %string%:
	return type: string
	get:
		return "<command:%expr-1%>%expr-2%<reset>"

# Command
expression [click] link %string% with %string%:
	return type: string
	get:
		return "<link:%expr-1%>%expr-2%<reset>"

#
#	Loading
#

# Load Event
on load:
	delete {{@storage}::cache::*}
	set {_pl::*} to "skript-reflect", "SkBee", "spark" and "Skent"
	loop {_pl::*}:
		if plugin loop-value is not enabled:
			log "&8[&dAmethyst&8]&c Could not find dependency ""%loop-value%""!" as a error
			add 1 to {_error}
	set {{@storage}::cache::errors} to {_error}

	parse if plugin "Skent" is enabled:
		{@verbose} is true
		wait 3 seconds
		log "&8[&dAmethyst&8] &rChecking for new versions..." as info
		fetch url "https://raw.githubusercontent.com/Baezor1/Amethyst/main/version":
			if "{@version}" is not fetched url content:
				log "&8[&dAmethyst&8] &rA new version of &dAmethyst&r is avaliable!" as info
				log "&8[&dAmethyst&8] &rDownload it at &dhttps://github.com/Baezor1/Amethyst/releases" as info
				set {{@storage}::cache::newVer} to true
			else:
				delete {{@storage}::cache::newVer}
				log "&8[&dAmethyst&8] &rNo new version found." as info

#
#	Version Checker
#

# Version Checker
every {@check.version}:
	parse if plugin "Skent" is enabled:
		{@verbose} is true
		wait 3 seconds
		log "&8[&dAmethyst&8] &rChecking for new versions..." as info
		fetch url "https://raw.githubusercontent.com/Baezor1/Amethyst/main/version":
			if "{@version}" is not fetched url content:
				log "&8[&dAmethyst&8] &rA new version of &dAmethyst&r is avaliable!" as info
				log "&8[&dAmethyst&8] &rDownload it at &dhttps://github.com/Baezor1/Amethyst/releases" as info
				set {{@storage}::cache::newVer} to true
				broadcast feteched url content
			else:
				delete {{@storage}::cache::newVer}
				log "&8[&dAmethyst&8] &rNo new version found." as info

# Join Event
on join:
	player has permission "amethyst.admin"
	{{@storage}::cache::newVer} is true
	wait 3 seconds
	set {_link} to link "https://github.com/Baezor1/Amethyst/releases" with "&5&nhere&r"
	send formatted "&dA new version is avaliable for &5Amethyst&d! &dClick %{_link}% &dto download it!" to player

#
#	Skript Tab Completions
#

# Skript Tab Completions
on tab complete of "/sk" or "/skript":
	set tab completions for position 1 to "reload", "enable", "disable", "update" and "help"
	if tab arg-1 = "reload" or "disable":
		set tab completions for position 2 to enabled scripts
	if tab arg-1 = "enable":
		set tab completions for position 2 to disabled scripts

#
#	Commands
#

# Amethyst Command
command /amethyst:
	trigger:
		send "&dThis server is running version &5{@version}&d of &5Amethyst&d!"
		if {{@storage}::cache::errors} > 0:
			send "&cWarning! &4%{{@storage}::cache::errors}%&c errors have been found!"